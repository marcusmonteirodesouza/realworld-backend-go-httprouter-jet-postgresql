//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ArticleArticleTag = newArticleArticleTagTable("public", "article_article_tag", "")

type articleArticleTagTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnString
	ArticleID    postgres.ColumnString
	ArticleTagID postgres.ColumnString
	CreatedAt    postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ArticleArticleTagTable struct {
	articleArticleTagTable

	EXCLUDED articleArticleTagTable
}

// AS creates new ArticleArticleTagTable with assigned alias
func (a ArticleArticleTagTable) AS(alias string) *ArticleArticleTagTable {
	return newArticleArticleTagTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ArticleArticleTagTable with assigned schema name
func (a ArticleArticleTagTable) FromSchema(schemaName string) *ArticleArticleTagTable {
	return newArticleArticleTagTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ArticleArticleTagTable with assigned table prefix
func (a ArticleArticleTagTable) WithPrefix(prefix string) *ArticleArticleTagTable {
	return newArticleArticleTagTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ArticleArticleTagTable with assigned table suffix
func (a ArticleArticleTagTable) WithSuffix(suffix string) *ArticleArticleTagTable {
	return newArticleArticleTagTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newArticleArticleTagTable(schemaName, tableName, alias string) *ArticleArticleTagTable {
	return &ArticleArticleTagTable{
		articleArticleTagTable: newArticleArticleTagTableImpl(schemaName, tableName, alias),
		EXCLUDED:               newArticleArticleTagTableImpl("", "excluded", ""),
	}
}

func newArticleArticleTagTableImpl(schemaName, tableName, alias string) articleArticleTagTable {
	var (
		IDColumn           = postgres.StringColumn("id")
		ArticleIDColumn    = postgres.StringColumn("article_id")
		ArticleTagIDColumn = postgres.StringColumn("article_tag_id")
		CreatedAtColumn    = postgres.TimestampzColumn("created_at")
		allColumns         = postgres.ColumnList{IDColumn, ArticleIDColumn, ArticleTagIDColumn, CreatedAtColumn}
		mutableColumns     = postgres.ColumnList{ArticleIDColumn, ArticleTagIDColumn, CreatedAtColumn}
	)

	return articleArticleTagTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		ArticleID:    ArticleIDColumn,
		ArticleTagID: ArticleTagIDColumn,
		CreatedAt:    CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

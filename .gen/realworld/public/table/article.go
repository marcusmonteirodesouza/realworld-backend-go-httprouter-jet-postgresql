//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Article = newArticleTable("public", "article", "")

type articleTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnString
	AuthorID    postgres.ColumnString
	Slug        postgres.ColumnString
	Title       postgres.ColumnString
	Description postgres.ColumnString
	Body        postgres.ColumnString
	CreatedAt   postgres.ColumnTimestampz
	UpdatedAt   postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ArticleTable struct {
	articleTable

	EXCLUDED articleTable
}

// AS creates new ArticleTable with assigned alias
func (a ArticleTable) AS(alias string) *ArticleTable {
	return newArticleTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ArticleTable with assigned schema name
func (a ArticleTable) FromSchema(schemaName string) *ArticleTable {
	return newArticleTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ArticleTable with assigned table prefix
func (a ArticleTable) WithPrefix(prefix string) *ArticleTable {
	return newArticleTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ArticleTable with assigned table suffix
func (a ArticleTable) WithSuffix(suffix string) *ArticleTable {
	return newArticleTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newArticleTable(schemaName, tableName, alias string) *ArticleTable {
	return &ArticleTable{
		articleTable: newArticleTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newArticleTableImpl("", "excluded", ""),
	}
}

func newArticleTableImpl(schemaName, tableName, alias string) articleTable {
	var (
		IDColumn          = postgres.StringColumn("id")
		AuthorIDColumn    = postgres.StringColumn("author_id")
		SlugColumn        = postgres.StringColumn("slug")
		TitleColumn       = postgres.StringColumn("title")
		DescriptionColumn = postgres.StringColumn("description")
		BodyColumn        = postgres.StringColumn("body")
		CreatedAtColumn   = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn   = postgres.TimestampzColumn("updated_at")
		allColumns        = postgres.ColumnList{IDColumn, AuthorIDColumn, SlugColumn, TitleColumn, DescriptionColumn, BodyColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns    = postgres.ColumnList{AuthorIDColumn, SlugColumn, TitleColumn, DescriptionColumn, BodyColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return articleTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		AuthorID:    AuthorIDColumn,
		Slug:        SlugColumn,
		Title:       TitleColumn,
		Description: DescriptionColumn,
		Body:        BodyColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Favorite = newFavoriteTable("public", "favorite", "")

type favoriteTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnString
	UserID    postgres.ColumnString
	ArticleID postgres.ColumnString
	CreatedAt postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type FavoriteTable struct {
	favoriteTable

	EXCLUDED favoriteTable
}

// AS creates new FavoriteTable with assigned alias
func (a FavoriteTable) AS(alias string) *FavoriteTable {
	return newFavoriteTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FavoriteTable with assigned schema name
func (a FavoriteTable) FromSchema(schemaName string) *FavoriteTable {
	return newFavoriteTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FavoriteTable with assigned table prefix
func (a FavoriteTable) WithPrefix(prefix string) *FavoriteTable {
	return newFavoriteTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FavoriteTable with assigned table suffix
func (a FavoriteTable) WithSuffix(suffix string) *FavoriteTable {
	return newFavoriteTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFavoriteTable(schemaName, tableName, alias string) *FavoriteTable {
	return &FavoriteTable{
		favoriteTable: newFavoriteTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newFavoriteTableImpl("", "excluded", ""),
	}
}

func newFavoriteTableImpl(schemaName, tableName, alias string) favoriteTable {
	var (
		IDColumn        = postgres.StringColumn("id")
		UserIDColumn    = postgres.StringColumn("user_id")
		ArticleIDColumn = postgres.StringColumn("article_id")
		CreatedAtColumn = postgres.TimestampzColumn("created_at")
		allColumns      = postgres.ColumnList{IDColumn, UserIDColumn, ArticleIDColumn, CreatedAtColumn}
		mutableColumns  = postgres.ColumnList{UserIDColumn, ArticleIDColumn, CreatedAtColumn}
	)

	return favoriteTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		UserID:    UserIDColumn,
		ArticleID: ArticleIDColumn,
		CreatedAt: CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
